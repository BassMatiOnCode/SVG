<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-01-17" editor="usp" />
<meta name="author" content="usp" />
<meta name="creation-date" content="2021-06-17" />
<meta name="editor" content="usp" />
<meta name="change-date" content="2022-01-19" />
<meta name="version" content="2" />
<meta name="categories" content="Programming > Web Technology > SVG" />
<meta name="tags" content="web, development, svg, vector, graphics, introduction." />
<meta name="description" content="SVG has gained increasing popularity in the web since its advent in late 2001. SVG is XML, that means it is <em>readable</em>. It is a vector graphics format. In contrast to pixel-based raster graphics formats like BMP, GIF or PNG, SVG images scale <em>perfectly</em> up and down without loss of quality. It is therefore ideal for icons, drawings, diagrams, and illustrations. At the time of writing, most browsers have excellent support for SVG." />

<link rel="stylesheet" href="/inc/page.css" />
<link rel="stylesheet" href="./local.css" />
 
<title>Web Technologies - Scalable Vector Graphics</title>

</head><body><header id="page-header"></header><div id="main-toolbar"></div><main id="page-content">

<h1>SVG &ndash; Scalable Vector Graphics</h1>

<p id="page-abstract"></p>

<h2 cbc>Introduction</h2><div>

<p>SVG is XML. So it is <em>readable</em>:</p>

<figcaption class="listing">SVG source code</figcaption><pre>
&lt;<hi>svg</hi>
    width="50" height="50" viewBox="-50 -50 100 100"
    stroke="cornflowerblue" stroke-width="8" 
    stroke-linecap="round" fill="white" &gt;
    &lt;<hi>circle</hi> cx="0" cy="0" r="45" /&gt;
    &lt;<hi>line</hi> x1="-20" y1="20" x2="20" y2="-20" /&gt;
    &lt;<hi>line</hi> x1="-20" y1="-20" x2="20" y2="20" /&gt;
    &lt;/svg&gt;
</pre>

<p>This code creates the following image:</p>

<figcaption class="figure">SVG in an HTML document</figcaption>
<div load-src="img/fig-001.svg" style="display:block; margin: 10px 0 0 10px"></div>

<p>The code roughly translates into human language as follows:</p>

<ul style="list-style-image:none">
<li>Add an SVG element to the document, scaled down to 50 by 50 pixels.</li>
<li>The drawing's coordinate system goes from minus 50 to plus 50 for both axes, x and y.</li>
<li>The default stroke color for child elements is cornflower-blue, stroke width is 8, the line ends are rounded, and the fill color is white.</li>
<li>Then draw a circle at (0, 0) with a radius of 45 units.</li>
<li>Then add two diagonal lines between the specified coordinates x1, y1, x2 and y2.</li>
</ul>

<p>A final note: SVG is XML. This means that uper and lower case spelling matters!</p>

<!-- h2 Introduction --></div>

<h2 cbc>Benefits of SVG</h2><div>

<p>There are several benefits of SVG over raster image formats:</p>

<ul>
<li>SVG is dense, the image size is usually quite small.</li>
<li>SVG is ideal to be created in a text editor from scratch.</li>
<li>The individual drawing elements such as <tt>circle</tt>, <tt>line</tt> or <tt>path</tt> are similar to HTML elements; they can be created, deleted, styled, animated, and get event handlers attached with JavaScript.</li>
<li>An SVG image can have a logical, content-related <em>structure</em>. Content parts can be shown, hidden or transformed as required.</li>
<li>SVG elements can be <em>animated</em>.</li>
<li>SVG drawing creation can be scripted.</li>
<li>Simple to medium complex drawings can be created with a simple text editor. Sounds arkward at first, but with a little bit of practice the results can be quite impressive.</li>
</ul>

<!-- Benefits --></div>

<h2 cbc>SVG Editors</h2><div>

<p>Simple images can be created easily with any text editor. For more complex images, editor programs such as Inkscape, Visio, and Illustrator can be used &ndash; although, if you inspect the generated code, the results might be disappointing. SVG editors usually add their own functionality on top of SVG, which requires that a lot of metadata has to be stored in addition to the graphics elements, and this metadata is usually stored in the SVG file. In other words, the file is rather spoiled and thereby unreadable. Fortunately, all that junk can be removed either manually, or by an SVG optimizer. Note that this adds another step to the development process.</p>

<p>The online editor <em>Vecta</em> is different. It stores metadata outside the SVG file, so it shines with rather clean SVG output that does not need to be optimized.</p>

<!-- h2 --></div>

<h2 cbc>A Quickstart Example</h2><div>

<p>To get familiar with SVG, we create an empty HTML document and add an SVG tag:</p>

<figcaption class="listing">HTML document with an SVG element.</figcaption><pre>
&lt;html&gt;&lt;body&gt;
&lt;p&gt;Other HTML content may appear here&hellip;&lt;/p&gt;
&lt;<hi>svg</hi> viewBox="-50 -50 <hi>100 100</hi>" width="<hi>100</hi>" height="<hi>100</hi>" &gt;
    &hellip;
    &lt;/svg&gt;
&lt;p&gt;Other HTML content may appear here&hellip;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<p>Note that the SVG is a regular node in the HTML DOM.</p>

<p>The <tt>viewBox="x y w h"</tt> attribute specifies the coordinate system, the size of the drawing area. Drawing elements outside of this area are <em>clipped off</em>. The x axis goes from left to right, the y axis goes from top to bottom. This is equivalent to how text in HTML flows on a web page, left to right and top to bottom (lr-tb).</p>

<p>If omitted, the <tt>viewBox</tt> starts at (0, 0) and size is determined by the content.</p>

<p>Width and height attributes scale the image to its final size. If you can, make <tt>width</tt> and <tt>height</tt> identical to the size values in the <tt>viewBox</tt> attribue. If only width or height is given, the image is scaled with the aspect ratio preserved. If both width and height attributes are omitted, the image is scaled to 100 percent width or height of its container element, whatever fits best.</p>

<p>Drawing parts outside the view box are clipped. Negative x and y values are perfect and beneficial for symmetrical drawings!</p>

<p>The next instruction adds a <i>group</i> element <tt>g</tt>:</p>

<figcaption class="listing">Adding a group element</figcaption><pre>
&lt;html&gt;&lt;body&gt;
&lt;svg viewBox="-50 -50 100 100"&gt;
&lt;<hi>g</hi> stroke="darkorange" stroke-width="8" 
    stroke-linecap="round" fill="white"&gt;
    &lt;/g&gt;
&lt;/svg&gt;&lt;/body&gt;&lt;/html&gt;
</pre>

<p>The <tt>g</tt> element is used to encapsulate drawing elements and provide common presentation attributes for them. Examples are <tt>stroke</tt> (stroke or pen color), <tt>stroke-width</tt>, <tt>fill</tt> color, <tt>stroke-linecap="round"</tt> (the form of stroke ends), <tt>stroke-linejoin="round"</tt> (the form of corners between segments).</p>

<p>The group element <tt>g</tt> itself has no coordinates, but a <tt>transform</tt> attribute can be used to rotate, translate or skew the group and its child elements.</p>

<p>The next step adds some drawing primitives as child elements of the group container:</p>

<figcaption class="listing">Adding some drawing elements</figcaption><pre>
&lt;html&gt;&lt;body&gt;
&lt;svg viewBox="-50 -50 100 100" width="50" height="50"&gt;
&lt;g stroke="darkorange" stroke-width="8" 
    stroke-linecap="round" fill="white"&gt;
    &lt;<hi>circle</hi> cx="0" cy="0" r="45" /&gt;
    &lt;<hi>line</hi> x1="-20" y1="20" x2="20" y2="-20" /&gt;
    &lt;<hi>line</hi> x1="-20" y1="-20" x2="20" y2="20" /&gt;
    &lt;/g&gt;
&lt;/svg&gt;
</pre>

<p>Drawing elements are stacked on top of each other in the order of appearance, but their <tt>z-index</tt> can be modified as required.</p>

<p>Some attributes like stroke color and width are inherited from their container(s). Others, like element geometry attributes, are not inherited.</p>

<p>And here is the result:</p>

<figcaption class="figure">The rendered SVG element</figcaption><svg 
    viewBox="-50 -50 100 100" width="50">
<g stroke="cornflowerblue" stroke-width="8" 
    stroke-linecap="round" fill="white">
    <circle cx="0" cy="0" r="45" />
    <line x1="-20" y1="20" x2="20" y2="-20" />
    <line x1="-20" y1="-20" x2="20" y2="20" />
    </g>
</svg>

<!-- Starter --></div>

<h2 cbc>Embedding SVG in HTML</h2><div>

<p>There are three options to get SVG into an HTML document:</p>

<ol>
<li>inline with an <tt>&lt;svg&gt; &hellip; &lt;/svg&gt;</tt> tag</li>
<li>as external XML document with an <tt>&lt;object&gt; &hellip; &lt;/object&gt;</tt> tag</li>
<li>as external image </li>
</ol>

<h3 cbc>Inline SVG</h3><div>

<p>An <em>inline</em> SVG drawing appears like a regular element in an HTML document:</p>

<figcaption class="listing">Inline SVG</figcaption><pre>
&lt;html&gt;&lt;head&gt;
    &hellip;
&lt;/head&gt;&lt;body&gt;
&lt;<hi>svg</hi> viewBox="-50 -50 100 100"
    width="100" height="100"&gt;
    &hellip;
    &lt;/svg&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<p>This the recommended approach for single, unique and potentially large SVG drawings. It is not recommended for multiple, non-unique use, such as <tt>list-style-image</tt> icons, as it tends to unnecessarily inflate the file and make the HTML source code harder to read. However, there are several advantages:</p>

<ul>
<li>HTML style rules can address elements within the SVG body, so you can style parts or even individual drawing elements as any other regular HTML element.</li>
<li>HTML script code can access and manipulat the SVG element and its child nodes.</li>
<li>Script code, embedded in the SVG element body, can access the HTML document and its elements.</li>
</ul>

<p>The disadvantages:</p>

<ul>
<li>SVG code can be quite large and thereby inflates the size of the HTML document.</li>
<li>The scope of <tt>id</tt> attributes spans the entire document. SVG copy&amp;paste operations might produce duplicate element <tt>id</tt> values, which will lead to unexpected results.</li>
</ul>

<!-- h3 --></div>

<h3 cbc>External XML Document</h3><div>

<p><em>External</em> or <em>standalone</em> SVG is treated very much like images. This approach has several advantages:</p>
<ul>
<li>Browser can handle images very efficiently, so the use of SVG for often recurring icons is perfect.</li>
<li>The method is intuitive and familiar.</li>
</ul>

<p>The preferred method to embed is the <tt>object</tt> element. The <tt>data</tt> attribute references the SVG resource. The <tt>type</tt> must be "image/svg+xml":</p>

<figcaption class="listing">Using an OBJECT element</figcaption><pre>
&lt;object data="path/to/image.svg type="image/svg+xml/&gt;
</pre>

<p>The external SVG code may have an XML prolog and must have an SVG namespace declaration attribute:</p>

<figcaption class="listing">SVG source file contents</figcaption><pre>
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
    "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg <hi>xmlns</hi>="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
    &hellip;
    &lt;/svg&gt;
</pre>

<p>The XML prolog is required to declare character encoding that is different from UTF-8 or UTF-16. Therefore the prolog in the example above can safely be omitted.</p>

<p>Before SVG 2, the <tt>xmlns:xlink</tt> namespace import was required if you used <tt>href</tt> attributes to reference other resources. Which is almost always the case. XLINK is now obsolete.</p>

<p>The SGML <tt>DOCTYPE</tt> declaration is optional. Some editors and validation tools use it for syntax checking and input aids. If you don't really need it, omit it.</p>

<p>You may include <tt>width</tt> and <tt>height</tt> attributes in the source to give the images a predefined size, so they do not scale up to the size of their container. However, such a predefined size can be overridden with width and height attributes on the <tt>object</tt> element, as shown in the following example:</p>

<figcaption class="listing">SVG source file example</figcaption><pre>
&lt;svg xmlns="http://www.w3.org/2000/svg" 
    viewBox="-50 -50 <hi>100 100</hi>" 
    width="<hi>50</hi>" height="<hi>50</hi>" 
    stroke="cornflowerblue" stroke-width="8" stroke-linecap="round" fill="white"&gt;
    &lt;circle cx="0" cy="0" r="45" /&gt;
    &lt;line x1="-20" y1="20" x2="20" y2="-20" /&gt;
    &lt;line x1="-20" y1="-20" x2="20" y2="20" /&gt;
    &lt;/svg&gt;
</pre>

<p>The drawing is scaled up by the container element:</p>

<figcaption class="listing">HTML markup with size attributes</figcaption><pre>
&lt;object data="img/fig-001.svg" type="image/svg+xml" 
    width="<hi>64</hi>"&gt;&lt;/object&gt;
</pre>

<figcaption class="figure">External SVG resource (fig-001.svg)</figcaption>
<object data="./img/fig-001.svg" type="image/svg+xml" width="64"></object>

<p>Another advantage of using an <tt>object</tt> element to embed SVG drawings: You can import external XML stylesheets, such as this one:</p>

<figcaption class="listing">An external stylesheet (common-styles.css)</figcaption>
<pre>
svg {
    stroke : cornflowerblue ;
    stroke-width : 5px ; 
    fill : white ;
    stroke-linecap : round ;
    }
</pre>

<p>SVG is XML, and XML documents can reference external resources:</p>

<figcaption class="listing">SVG source file example</figcaption><pre>
&lt;?<hi>xml-stylesheet</hi> type="text/css" <hi>href="common-styles.css"</hi> ?&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" 
    viewBox="-50 -50 100 100" width="50" height="50" &gt;
    &lt;circle cx="0" cy="0" r="45" /&gt;
    &lt;line x1="-20" y1="20" x2="20" y2="-20" /&gt;
    &lt;line x1="-20" y1="-20" x2="20" y2="20" /&gt;
    &lt;/svg&gt;
</pre>

<p>Note that although the presentation attributes have been omitted, the result is nearly the same as before:</p>

<figcaption class="figure">External SVG (fig-004.svg) references external stylesheet</figcaption>
<object data="./img/fig-004.svg" type="image/svg+xml"></object>

<p>The use of the <tt>img</tt> element is not recommended, but widely supported in browsers:</p>

<figcaption class="listing">Using an IMG element</figcaption><pre>
&lt;img src="path/to/image.svg" /&gt;
</pre>

<!-- h3 --></div>

<h3 cbc>External Image</h3><div>

<p>The use of the <tt>img</tt> elements is not recommended to embed SVG drawings, but widely supported in browsers:</p>

<figcaption class="listing">IMG element references an SVG drawing</figcaption><pre>
&lt;img src="path/to/image.svg" /&gt;
</pre>

<p>At first sight, it seems to work:</p>

<figcaption class="figure">IMG element references SVG drawing (fig-001.svg)</figcaption>
<img src="./img/fig-001.svg" />

<p>However, this method is quite restrictive: Images are bound to be self-contained, they <em>cannot</em> reference other resources outside their source file:</p>

<figcaption class="figure">IMG element references SVG drawing (fig-004.svg)</figcaption>
<img src="./img/fig-004.svg" />

<p>Another example &ndash; an SVG image as list-style-image:</p>

<ul id="ul-001" style="list-style-image: url(./img/fig-005.svg); font-size: 20px">
<li>mA</li>
<li>mB</li>
<li>mC</li>
</ul>

<p>Again, the presentation attributes cannot be defined in an external stylesheet.</p>

<p>External images have a number of restrictions:</p>

<ul>
<li>Embedded scripts are not executed</li>
<li>They cannot reference external resources, i. e. they must be self-contained</li>
<li>Individual drawing elements are not accessible</li>
</ul>

<!-- h3 --></div>

<h3 cbc>Compressed SVG Files</h3><div>

<p>Normal SVG files have the extension ".svg". External SVG resources can be gzip-compressed, and then have the extension ".svgz". Compressed SVG must be served correctly. According to <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Getting_Started#a_word_on_webservers">developers.mozilla.org</a>, the server must send the following headers for .svgz resources:</p>

<pre>
Content-Type: image/svg+xml
Content-Encoding: gzip
Vary: Accept-Encoding
</pre>

</div>

<h3 cbc>Inline Versus External SVG</h3><div>

<p>External SVG elements must be <em>self-contained</em> &ndash; they cannot reference resources outside the source file, such as CSS style sheets or fonts. However, as SVG is XML, it is possible to link to an XML stylesheet: </p>

<figcaption class="listing">Linking to a styesheet</figcaption>
<pre>
&lt;?<hi>xml-stylesheet</hi> type="text/css" href="path/to/stylesheet.css" ?&gt;
&lt;svg id="root" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/" &lt;
    &hellip;
    &lt;/svg&gt;
</pre>

<p>

These restrictions don't apply to inline SVG, which makes it very flexible.</p>

<p>Browsers can very efficiently handle images, especially multiple references to a single image. If an SVG icon is used in many different places, it is better to embed it as external SVG resource instead of bloating the document with multiple copies of the same drawing code.</p>

</div>

<!-- h2 Embedding SVG in HTML --></div>

<h2 cbc>Drawing Elements</h2><div>

<p>SVG provides a number of drawing primitives, such as line, circle, ellipse, arc, path, and markers.</p>

<p>Text is created with <tt>text</tt> elements.The <tt>text-anchor</tt> attribute defines the reference point for positioning. Possible values are <tt>left</tt>, <tt>right</tt> and <tt>center</tt>.</p>

<p>Text colors are set with <tt>stroke</tt> and <tt>fill</tt> attributes. The stroke color is usually set to <tt>none</tt>, although it can be used for an outline effect. Note that the CSS attribute <tt>color</tt> doesn't work on SVG text elements.</p>

<!-- h2 --></div>

<h2 cbc>Style Sheets</h2><div>

<p>The appearance of drawing elements is controlled by presentation attributes. They can be overridden by styles, either inline, or from a stylesheet. Stylesheets can be defined inside the SVG element body, or externally in the container document (as XML stylesheet link or HTML stylesheet link).</p>

<!-- h2 --></div>

<h2 cbc>Gradients</h2><div>

<p>The <tt>linearGradient</tt> and <tt>radialGradient</tt> elements create (you might have guessed it) linear and radial gradients. Just put a number of stop color elements in the body. <tt>fx</tt> and <tt>fy</tt> attributes define the center of the effect.</p>

<!-- h2 --></div>

<h2 cbc>Animations</h2><div>

<p>SVG implements <a href="https://en.wikipedia.org/wiki/Synchronized_Multimedia_Integration_Language">SMIL</a> and CSS animations. SMIL animations are usually not fully suported.</p>

<p>CSS animations are not a full replacement for SMIL, but better supported by browsers. Not all CSS attributes can be animated.</p>

<!-- h2 --></div>

<h2 cbc>References</h2><div>

<dl class="link-list">
<dt><a href="https://stackoverflow.com/questions/19269622/applying-rounded-corners-to-paths-polygons/27031874#27031874">Applying rounded corners to paths/polygons</a> on StackOverflow</dt>
<dd><a href="https://plnkr.co/edit/kGnGGyoOCKil02k04snu?preview">SVG Corner Rounding Test</a> by Yona Appletree</dd>
</dl>
<!-- h2 --></div>

</main><script type="module" src="/inc/page.js" ></script></body></html>