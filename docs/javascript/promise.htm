<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-01-17" editor="usp" />
<meta name="author" content="usp" />
<meta name="creation-date" content="2021-09-10" />
<meta name="editor" content="usp" />
<meta name="change-date" content="2021-09-10" />
<meta name="version" content="1" />
<meta name="categories" content="Web Technologies > JavaScript" />
<meta name="tags" content="programming, JavaScript, async, promise" />
<meta name="description" content="Programming an asynchronous sequence of operations can be a tedious task. The JavaScript Promise has been introduced to simplify that. It acts as a wrapper for a synchronous or asynchronous task." />

<link rel="stylesheet" href="/inc/page.css" />
 
<title>JavaScript > Promise</title>

</head><body><header id="page-header"></header><div id="main-toolbar"></div><div id="path-bar"><a href="/index.htm">Home</a> > <a href="/web-technologies/index.htm">Web Technologies</a> > <a href="JavaScript">JavaScript</a></div><main id="page-content">



<h1>Promise</h1>

<p id="page-abstract"></p>

<h2 cbc>States</h2><div>

<p>A Promise can be in one of three states: <em>settled</em>, <em>fulfilled</em>, or <em>rejected</em>.</p>

<figcaption class="figure">States of a Promise</figcaption>
<object data ="async/fig-002.svg" type="text/svg+xml"></object>

<p>A promise always starts in the pending state. In this state, the operation is configured and started. If the operation (immediately or eventually) fails, the Promise transits to the rejected state. If the operation succeeds, the state changes to fulfilled. Both final states are collectively called <em>settled</em>. </p>

<!-- h2 States --></div>

<h2 cbc>Example 1</h2><div>

<p>To get an idea of how that works, lets set up an example.</p>

<!-- h2 Example 1 --></div>

</main><script type="module" src="/inc/page.js" ></script></body></html>