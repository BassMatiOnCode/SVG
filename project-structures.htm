<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-01-17" editor="usp" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2022-01-27" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2022-02-08" />
<meta name="version" content="1" />
<meta name="categories" content="Programming > Web Design > Technologies" />
<meta name="tags" content="programming, web design, technologies, project, structure" />
<meta name="description" content="Websites can easily grow to an extent where development and maintanance cannot be efficiently done by a single team or in a single project. The project must be divided into partial projects in a way that multiple teams can work effectively without interference." />

<link rel="stylesheet" href="/inc/page.css" />
<style>
div.code { 
	font-family : "Droid Sans Mono", "Times New Roman", "Palatino Linotype", Serif, Consolas;
	font-size : 75%;
	line-height : 160% ;
	white-space : pre-line ;
	overflow : auto ;
	padding: 5px 0px 5px 5px ;
	margin-bottom : 10px ;
	margin-top : 10px ;
	border : 1px solid silver ;
	}
</style>

<style>
.dense { margin-top : 0px ; margin-bottom : 0px }
</style>
 
<title>Web Design - Project Structures</title>

</head><body><header id="page-header"></header><div id="main-toolbar"></div><main id="page-content">

<h1>Project Structures and Organisation</h1>

<p id="page-abstract"></p>



<h2 cbc>Website and Project Repository Structures</h2><div>

<p>A typical website has the following structure:</p>

<ul class="collapsible"  cbc-default="collapsed" style="line-height:130%">
<li cbc="expanded">root
	<ul>
	<li>index.htm</li>
	<li>logo.svg</li>
	<li>inc
		<ul>
		<li>script</li>
		<li>css</li>
		<li>icons</li>
		</ul></li>
	<li>img
    <ul>
    <li>image files</li>
	  </ul></li>
	<li>section-1
		<ul>
		<li>section-1 files</li>
		</ul></li>
	<li>&hellip;</li>
	<li>section-n
		<ul>
		<li>section-n files</li>
		</ul></li>
	</ul></li>
</ul>

<p>Let's call it the "website-1" project. The structure can be easily divided into partial projects:</p>

<ul>
<li>the site root project contains the index.htm and the files and folder directly related to the entire website.</li>
<li>the include files project with CSS, JavaScript and icon files</li>
<li>the partial projects for the website sections</li>
</ul>

<p>This structure shall be hosted and version-controlled on a code hoster account named "website-1". Typical code hosters are Github or Gitlab, they provide a service named "Github Pages" or "Gitlab Pages" which allows to serve static web sites from their servers. The site root project must be named in a specific way ("website-1.github.io" or "website-1.gitlab.io") so that it can be served from the account root url. The other projects are named "inc", "section-1", "section-2", and so on, so that they are served under the correct subfolder urls ("website-1.github.io/inc", "website-1.github.io/section-1", etc.).</p>

<p>The following sections explain the setup procedure in detail.</p>

<!-- h2 --></div>

<h2 cbc>Github Setup</h2><div>

<p>The following list details the setup procedure for Github.</p>

<ol class="collapsible instructions" cbc-default="collapsed" style="line-height: 150%">
<li>Create an account on Github
	<ol>
	<li>Create an account on Github named "website-1".</li>
	<li>Create an account access token.
		<ol>
		<li>Make sure you are logged in.</li>
		<li>In the burger menu at the top left corner, click "Setting".</li>
		<li>Click the "developer settings" in the left side-menu.</li>
		<li>Click "personal access tokens" in the left side-menu.</li>
		<li>Click the button "Generate new token".</li>
		<li>Tick at least the "repo" permissions.</li>
		<li>Click the button "Generate token".</li>
		</ol></li>
	<li>Make sure to copy the token to a safe location.</li>
	</ol></li>
<li>Create a new empty project named "website-1".
	<ol>
	<li>Optional: Create a new file named "docs/index.htm". This file will contain the home page of your web site. This implicitly creates the "docs" folder in your project. </li>
	<li>Enable Github Pages.
	  <ol>
	  <li>Select "main" as source branch.</li>
	  <li>Select "docs/" as source folder. The files inside will be served under the address "https://website-1.github.io/".</li>
	  </ol></li>
	</ol></li>
<li>Create a new project named "inc".
	<ol>
	<li>Optional: Create a new file named "docs/page.css". This file will provide the default style rules for the web pages. This implicitly creates the "docs" folder.</li>
	<li>Enable Github Pages for the project.
	  <ol>
	  <li>Select "main" as source branch.</li>
	  <li>Select "docs/" as source folder. The files will appear under the adress "https://website-1.github.io/inc/".</li>
	  </ol></li>
	</ol></li>
<li>Create a new project named "section-1".
	<ol>
	<li>Enable github pages as before.</li>
	</ol></li>
<li>Create new projects for the other website sections as shown above.</li>
</ol>

<!-- h2 --></div>

<h2 cbc>Cloning the Projects to the Workstation</h2><div>

<p>Editing files in the web browser is possible, but not the most pleasant experience. So let's setup local development on your workstation. We will clone the projects, make some changes and push them to the remote repositories. A certain order is not particularly necessary, but if you deviate, some folders might not be present when the instructions below reference them.</p>

<ol class="collapsible instructions" cbc-default="collapsed" style="line-height: 200%">
<li>Clone the <tt>inc</tt> project.
	<ol>
	<li>Create a folder for the project:
		<div class="code">$ mkdir "d:\github\website-1"
		$ cd /d "d:\gitbub\website-1"
		</div></li>
	<li>Clone the project:
		<div class="code">$ git clone https://github.com/website-1/inc.git
		$ cd inc
		</div></li>
	<li>Add user name and the (previously saved) access token to the repository origin:
		<div class="code">$ git remote set-url origin https://website-1:saved-access-token@github.com/website-1/inc.git
		$ git remote -v
		</div></li>
	<li>If not already present, create an empty .nojekyll file in the root folder because we build our site manually:
		<div class="code">$ copy nul .nojekyll</div></li>
	<li>If not already present, create a <tt>.gitignore</tt> file:
		<div class="code">$ copy con .gitignore
		.vs\
		*.bak
		&lt;ctrl-c&gt;
		</div>
		If you work with Visual Studio, exclude the .vs folder. Files with a .bak extension will also be excluded from the repository. Depending on your preferences, you might want to supply slightly different content. When done, type control-c to close the input stream. As an alternative, you can create the file with notepad.exe:
		<div class="code">$ notepad .gitignore</div></li>
	<li>If not already present, create the <tt>docs</tt> subfolder:
		<div class="code">$ mkdir docs</div></li>
	<li>If not already present, create the default styleheet file for the pages in the docs folder:
		<div class="code">$ copy nul docs\page.css
		$ notepad docs\page.css</div>
		Enter some initial CSS code so that we can see something in the browser.</li>
	</ol></li>
<li>Clone the section-1 project.
	<ol>
	<li>Clone the project:
		<div class="code">$ cd d:\github\website-1
		$ git clone https://github.com/website-1/section-.git
		$ cd section-1
		</div></li>
	<li>Add user name and the (previously saved) access token to the repository origin:
		<div class="code">$ git remote set-url origin https://website-1:saved-access-token@github.com/website-1/section-1.git
		$ git remote -v
		</div></li>
	<li>If not already present, create an empty .nojekyll file in the root folder because we build our site manually:
		<div class="code">$ copy nul .nojekyll</div></li>
	<li>If not already present, create a <tt>.gitignore</tt> file:
		<div class="code">$ copy con .gitignore
		inc\
		.vs\
		*.bak
		&lt;ctrl-c&gt;
		</div>
		The inc folder will be excluded from the repository because the include folder is provided by the inc project. Also exclude the .vs folder if you work with Visual Studio, and files with a .bak extension.</li>
	<li>If not already present, create the <tt>docs</tt> subfolder:
		<div class="code">$ mkdir docs</div></li>
	<li>If not already present, create the section-1 index page in the docs folder:
		<div class="code">$ copy nul docs\section-1.htm
		$ notepad docs\section-1.htm</div>
		Enter some initial html code so that we can see something in the browser.</li>
	<li>Create a symbolic link to the include folder. This is necessary for serving the project in a local webserver:
		<div class="code">$ cd docs\
		$ mklink /D inc d:\github\website-1\inc\docs</div></li>
	</ol></li>
<li>Clone the other section projects in the same way.</li>
<li>Clone the website root project.
	<ol>
	<li>Clone the project:
		<div class="code">$ cd /d "d:\gitbub\website-1"
		$ git clone https://github.com/website-1/website-1.github.io.git site-root
		$ cd site-root
		</div></li>
	<li>Add user name and the (previously saved) access token to the repository origin:
		<div class="code">$ git remote set-url origin https://website-1:saved-access-token@github.com/website-1/website-1.github.io.git
		$ git remote -v
		</div></li>
	<li>If not already present, create an empty .nojekyll file in the project root folder:
		<div class="code">$ copy nul .nojekyll</div></li>
	<li>If not already present, create a <tt>.gitignore</tt> file:
		<div class="code">$ copy con .gitignore
		.vs\
		inc\
		section-1\
		section-2\
		&hellip;
		section-n\
		*.bak
		&lt;ctrl-c&gt;
		</div>
		As before, the inc folder will be excluded from the repository it is provided by the inc project. Similarly, add the section folders because they are provided by the website section projects. And add the .vs folder if you work with Visual Studio and files with a .bak extension.</li>
	<li>If not already present, create the <tt>docs</tt> subfolder:
		<div class="code">$ mkdir docs</div></li>
	<li>If not already present, create the index page in the docs folder:
		<div class="code">$ copy nul docs\index.htm
		$ notepad docs\index.htm</div>
		Enter some initial html code so that we can see something in the browser.</li>
	<li>Create a symbolic link to the include and section project folders. This is necessary for serving the project in a local webserver:
		<div class="code">$ cd docs\
		$ mklink /D inc d:\github\website-1\inc\docs
		$ mklink /D section-1 d:\github\website-1\section-1\docs
		$ mklink /D section-2 d:\github\website-1\section-2\docs
		&emsp;&hellip;
		$ mklink /D section-n d:\github\website-1\section-n\docs
		</div></li>
	</ol></li>
<li>Push changes to the remote repository:
	<ol>
	<li>First, the website root project:
		<ol>
		<li>Check the status:
			<div class="code">$ cd d:\github\website-1\site-root
			$ git status</div>
			This will list files with pending changes in workspace.</li>
		<li>Add changed files to the stage:
			<div class="code">$ git add file-name</div>
			You might have to repeat this command several times. Use wildcards if possible.</li>
		<li>Commit staged files to the local repsitory:
			<div class="code">git commit -m "a meaningful change description"</div></li>
		<li>Finally, push the changes to the remote repository:
			<div class="code">$ git push</div>
			After a short while, you should get a success message. Github will recognize the push command and automaticall start the build and publishing procedure. When done, your files are online. </li>
		</ol></li>
	<li>Repeat the commit & push procedure for the other projects (inc, section-1, &hellip;, section-n).</li>
	</ol></li>
<li>After a short while, your website should be online. Navigate a web browser to "https://website-1.github.io" to verify the published content.</li>
</ol>

<p>Now it is time to start authoring content: Create and edit files, add them to the stage, commit changed files, push local changes to the remote repository.</p>

<!-- h2 --></div>

<h2 cbc>Testing in a Local Webserver</h2><div>

<p>Chances are that you may not want to push every small change to the public production webserver to check your work. For this purpose, we use a local webserver. A small, light-weight thing such as <tt>Deno</tt> works perfectly for this purpose. Make sure you have <tt>Deno</tt> installed and included in the <tt>path</tt> environment variable. Then execute the following commands:</p>

<pre>
$ deno install --allow-net --allow-read https://deno.land/std/http/file_server.ts
$ cd d:\github\website-1\site-root
$ file_server
</pre>

<p>The first line installs the file_server.ts module locally and creates some command wrappers. This has to be done only once. The third line actually starts the server, which will then listen on port 4507 on the local machine for incoming requests. The current directory serves as website root folder. Resources outside this directory tree won't be served.</p>

<p>Now navigate a web browser to "localhost:4507/index.htm", and you should be able to view the index page.</p>

<p>If everything is okay, commit and push the changes to the remote repository.</p>

<!-- h2 --></div>

<h2 cbc>Integrating Web Components</h2><div>

<p>Chances are that many resources like components, script, stylesheet and image files are already prefabricated and ready to be integrated into the website-1 project. We <em>could</em> copy and paste the files into the website-1/inc/docs folder, but we might want updates to spread into the website project(s) <em>automatically</em>.</p>

<p>For this purpose, we can use <em>hard links</em> instead of copies. Let's assume our web design company has a proprietary web components toolbox project, hosted on Github in the <tt>github.com/my-company/web-components.git</tt> repository, locally available in the folder <tt>d:\github\my-company\web-components</tt> folder, and we want to use the nested ordered list counter component in the <tt>website-1</tt> project. The component is implemented in a CSS file named <tt>nested-list-counter\counter-1.css</tt>. To use that file in the website-1 project, create a hard link:</p>

<figcaption class="listing">Integrating a web component</figcaption>
<pre>
$ cd /d d:\github\website-1\inc\docs
$ mklink /h counter-1.css d:\github\my-company\web-components\nested-list-counter\counter-1.css
</pre>

<p>Now this component can be used in any html file in website-1:</p>

<figcaption class="listing">Using the web component</figcaption>
<pre>
&lt;html&gt;&lt;head&gt;
&lt;link rel="stylesheet" href="/inc/page.css" /&gt;
&lt;link rel="stylesheet" href="<hi>/inc/counter-1.css</hi>" /&gt;
&lt;/head&gt;&lt;body&gt;
<hi>&lt;ol instruction&gt;</hi>
&lt;li&gt;First&lt;/li&gt;
&lt;li&gt;Then
    &lt;ol&gt;
    &lt;li&gt;Evaluate&lt;/li&gt;
    &lt;li&gt;Estimate&lt;/li&gt;
    &lt;li&gt;Design&lt;/li&gt;
    &lt;li&gt;Implement&lt;/li&gt;
    &lt;li&gt;Test&lt;/li&gt;
    &lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Finally&lt;/li&gt;
&lt;/ol&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>

<p>If served from a local web server, the effect of the component is already visible. To publish the change to the production webserver on Github, execute the following commands:</p>

<figcaption class="listing">Integrating a web component into the project repository</figcaption>
<pre>
$ cd /d d:\github\website-1\inc
$ git status
Unobserved file(s):
    counter-1.css
$ git add counter-1.css
$ git commit -m "Nested ordered list counter component added to the project"
$ git push
</pre>

<p>This works fine because git cannot distinguish a "real" file from a hard link to the "real" file. In fact, a "real file" is a directory entry referencing the data block. Creating a hard link creates a new directory entry which references the same data block. Because both directory entries are equivalent, there is also no such thing as "the real directory entry".</p>

<!-- h2 --></div>

<h2 cbc>Hosting Projects on Gitlab</h2><div>

<p>Another popular code hoster is <em>Gitlab</em>. Gitlab is very similar to Github, and there is also a feature called <em>Gitlab Pages</em>, which can be used to publish static web sites under the address <tt>account-name.gitlab.io</tt>.</p>

<p>The procedures are pretty much as described. The differences :</p>

<ol>
<li>You cannot select a branch and source folder. Instead, the source folder is defined in the following control file.</li>
<li>Add a file named <tt>.gitlab-ci.yml</tt> to the project root folder, and paste the following content:
	<pre class="">image: alpine:latest
    pages:
        stage: deploy
        script:
        - echo 'Nothing to do...'
        artifacts:
        paths:
        - public
        expire_in: 1 day
        rules:
        - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH</pre>
	This defines the <tt>public</tt> folder as deployment root folder. It is the equivalent to the <tt>docs</tt> folder on Github.</li>
<li>The file <tt>.nojekyll</tt> is not used on Gitlab.</li>
<li>Store the project repositories under the path <tt>d:\gitlab\project-name\</tt> to separated it a little bit from the projects hosted on Github.</li>
</ol>

<!-- h2 --></div>

</main><footer id="page-footer"></footer><script type="module" src="/inc/page.js" ></script></body></html>